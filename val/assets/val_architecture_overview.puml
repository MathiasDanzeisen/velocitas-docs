@startuml
' To build you must have C4-PlantUML installed locally, see https://github.com/plantuml-stdlib/C4-PlantUML
' If c4plantuml is installed in your home directory you can generate val.png like
' java -Dplantuml.include.path=/home/username/ -jar /path/to/plantuml-1.2022.3.jar
!include c4plantuml/C4.puml
!include c4plantuml/C4_Component.puml

Person(veh_integrator, "Vehicle Integrator")


Boundary(abb_veh_val, "Vehicle Abstraction Layer", "Architectural Building Block") {
  !startsub SBB_SDV_EDGE_VAL_COMP
  Component(edge_data_broker, "Vehicle Data Broker","vehicle_data_broker")
  Component(edge_vehicle_services, "Vehicle Services", "seat_service, hvac_service, ...")
  Component(edge_feeder_can, "Data Feeders", "feeder_can, ...")
  Component_Ext(edge_hardware_abstraction, "Hardware Abstraction", "SocketCAN, vsomeip")
  !endsub

  !startsub SBB_SDV_EDGE_VAL_REL
  Rel_U(edge_vehicle_services, edge_data_broker, "Provide Datapoints", "grpc", "IF_VehicleEdgeDataCollector")
  Rel(edge_vehicle_services, edge_hardware_abstraction, "uses")
  Rel_U(edge_feeder_can, edge_data_broker, "Provide Datapoints", "grpc", "IF_VehicleEdgeDataCollector")
  Rel(edge_feeder_can, edge_hardware_abstraction, "uses")
  !endsub
}

Boundary(abb_veh_networks, "Vehicle Networks", "") {
  !startsub SBB_SDV_EDGE_VEH_NETWORKS_COMP
  Component_Ext(veh_can_network, "CAN Network", "")
  Component_Ext(veh_can_dbc, "CAN Network description", "dbc_file")
  !endsub

  !startsub SBB_SDV_EDGE_VEH_NETWORKS_REL
  Rel(veh_can_dbc, veh_can_network, "describes")
  !endsub

}

Component_Ext(feeder_can_mapping, "CAN mapping file", "yaml")
Component_Ext(signal_desciption, "signal description file", "yaml")
Component_Ext(service_desciption, "service description files", "yaml")

Container_Boundary(abb_veh_app_sdk, "Vehicle Application") {
  Component_Ext(veh_app, "Vehicle App", "")
  Component(edge_communication_middleware, "Communication Middleware", "grpc, dapr")
  Component(veh_app_python_core_sdk, "Python Core SDK", "Python Package")
}

Rel_D(edge_hardware_abstraction, veh_can_network, "CAN Access", "CAN", "")

Rel(veh_app_python_core_sdk, edge_vehicle_services, "Execute Method","grpc", "")

Rel_L(veh_app_python_core_sdk, edge_communication_middleware, "uses")
Rel_U(abb_veh_val, edge_communication_middleware, "uses")
Rel_D(veh_app, veh_app_python_core_sdk, "uses")

Rel_D(veh_app_python_core_sdk, edge_data_broker, "Request Datapoints", "grpc", "")

Rel(edge_feeder_can, veh_can_dbc, "uses")
Rel(edge_feeder_can, feeder_can_mapping, "uses")

Rel_L(signal_desciption, edge_feeder_can, "describes")
Rel_U(service_desciption,edge_vehicle_services , "describes")

Rel(veh_integrator,veh_can_dbc , "uses")
Rel(veh_integrator,feeder_can_mapping , "adapts")
Rel(veh_integrator,edge_vehicle_services , "adapts")

@enduml
